{"version":3,"sources":["utils/utils.js","pages/main.jsx","App.js","index.js"],"names":["rand","min","max","tail","Math","random","toFixed","get_random_color","h","s","l","increase_alpha","c","a","_split","split","join","MainPage","useState","datasets","setDatasets","currentDataset","setCurrentDataset","currentColor","setCurrentColor","suffixX","setSuffixX","suffixY","setSuffixY","chartName","setChartName","displayDatasets","setDisplayDatasets","lineMode","setLineMode","useEffect","_datasets","slice","edgePoint","forEach","d","Number","data","x","length","_displayDatasets","push","line","generateLineChart","input","output","JSON","parse","stringify","label","getUniqueDatasetName","backgroundColor","borderColor","sortFunc","b","increasingX","sort","minimumData","point","last","pop","y","options","responsive","plugins","legend","display","scales","type","grid","color","borderDash","ticks","callback","value","index","values","interaction","intersect","animation","duration","newName","allNames","map","includes","changeDatasetName","e","i","currentTarget","moveDataset","dir","splice","className","tabIndex","onChange","onChangeComplete","hsl","_hsl","defaultValue","onFocus","onBlur","onKeyDown","key","blur","onDoubleClick","randomColor","randomizeDatasetColor","style","background","title","onClick","deleteDataset","icon","faTimes","size","faChevronLeft","faChevronRight","placeholder","faArrowRight","faArrowUp","preventDefault","target","text","newDataset","stepped","fill","borderWidth","pointHoverRadius","pointRadius","hidden","err","console","log","toggleDatasetVisibility","opacity","cursor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MACO,SAASA,EAAKC,EAAKC,GAAgB,IAAXC,EAAU,uDAAH,EACpC,OAAQF,EAAMG,KAAKC,UAAYH,EAAMD,IAAMK,QAAQH,GAG9C,SAASI,IACd,IAAIC,EAAIR,EAAK,EAAG,KACZS,EAAIT,EAAK,GAAI,KACbU,EAAIV,EAAK,GAAI,IACjB,MAAM,QAAN,OAAeQ,EAAf,aAAqBC,EAArB,cAA4BC,EAA5B,YAGK,SAASC,EAAeC,EAAGC,GAChC,IAAKD,EAAG,MAAO,GACf,IAAME,EAASF,EAAEG,MAAM,MAEvB,OADAD,EAAO,GAAP,UAAeD,EAAf,KACOC,EAAOE,KAAK,M,mCC6WNC,EAtXE,WACf,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4CF,mBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAwCJ,qBAAxC,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAkCV,mBAAS,IAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAA8CZ,mBAAS,IAAvD,mBAAOa,EAAP,KAAwBC,EAAxB,KACA,EAAgCd,mBAAS,GAAzC,mBAAOe,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WACR,IAAMC,EAAYjB,EAASkB,QAMvBC,EAAY,KAEhBF,EAAUG,SAAS,SAAAC,GACI,IAAD,EAC0C,EAGvD,EACsE,EAL5D,IAAbP,GACgB,OAAdK,GAAsBG,OAAM,UAACD,EAAEE,KAAK,UAAR,aAAC,EAAWC,GAAKL,KAC/CA,EAAYG,OAAM,UAACD,EAAEE,KAAK,UAAR,aAAC,EAAWC,KAGb,QAAdL,GAAsBG,OAAM,UAACD,EAAEE,KAAKF,EAAEE,KAAKE,OAAO,UAAtB,aAAC,EAAyBD,GAAKL,KAC9DA,EAAYG,OAAM,UAACD,EAAEE,KAAKF,EAAEE,KAAKE,OAAO,UAAtB,aAAC,EAAyBD,OAKlD,IAAME,EAAmB,GACzBT,EAAUG,SAAS,SAAAC,GACjBK,EAAiBC,KAAKN,GAEtB,IAAMO,EAAOC,EAAkBR,EAAGF,GAClCO,EAAiBC,KAAKC,MAGxBf,EAAmBa,KAClB,CAAC1B,EAAUc,IAEd,IAAMe,EAAoB,SAACC,EAAOX,GAAe,IAAD,EAExCY,EAASC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEzCC,EAAOI,MAAQC,EAAqB,OAAD,OAAQN,EAAMK,MAAd,MACnCJ,EAAOM,gBAAkB7C,EAAeuC,EAAOM,gBAAiB,GAChEN,EAAOO,YAAc9C,EAAeuC,EAAOM,gBAAiB,IAE5D,IAR8C,EAQxCE,EAAwB,IAAbzB,EACb,SAACpB,EAAG8C,GAAJ,OAAUlB,OAAO5B,EAAE8B,GAAKF,OAAOkB,EAAEhB,IACjC,SAAC9B,EAAG8C,GAAJ,OAAUlB,OAAOkB,EAAEhB,GAAKF,OAAO5B,EAAE8B,IAE/BiB,EAAcV,EAAOR,KAAKmB,KAAKH,GAC/BI,EAAc,GAb0B,cAe1BF,GAf0B,IAe9C,2BAAiC,CAE/B,IAFgC,IAAvBG,EAAsB,QAC3BC,OAAI,EACAA,EAAOF,EAAYG,OACzB,GAAIxB,OAAOuB,EAAKE,GAAKzB,OAAOsB,EAAMG,GAAI,CACpCJ,EAAYhB,KAAKkB,GACjB,MAGJF,EAAYhB,KAAKiB,IAvB2B,8BAuC9C,OAVAD,EAAYvB,SAAQ,SAAAI,GAAOA,EAAE1C,IAAM0C,EAAEuB,KAGrChB,EAAOR,KAAP,CACE,CAAEC,EAAGL,EAAW4B,EAAC,UAAEJ,EAAY,UAAd,aAAE,EAAgBI,IADrC,OAEKJ,GAKEZ,GAIHiB,EAAU,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAMbC,OAAQ,CACN7B,EAAG,CACD8B,KAAM,SACNC,KAAM,CACJC,MAAO,YACPC,WAAY,CAAC,EAAG,IAElBC,MAAO,CACLF,MAAO,UACPG,SAAU,SAASC,EAAOC,EAAOC,GAC/B,OAAOF,EAAQtD,KAIrByC,EAAG,CACDQ,KAAM,CACJC,MAAO,YACPC,WAAY,CAAC,EAAG,IAElBC,MAAO,CACLF,MAAO,UACPG,SAAU,SAASC,EAAOC,EAAOC,GAC/B,MAAM,GAAN,OAAUF,EAAV,YAAmBpD,OAK3BuD,YAAa,CACXC,WAAW,GAEbC,UAAW,CACTC,SAAU,IA4CR9B,EAAuB,SAAC+B,GAI5B,IAHA,IAAMC,EAAWpE,EAASqE,KAAK,SAAA7C,GAAC,OAAIA,EAAEW,SAG/BiC,EAASE,SAASH,IACvBA,EAAO,UAHI,UAGJ,OAAaA,GAEtB,OAAOA,GASHI,EAAoB,SAACC,EAAGC,GAC5B,IAAMxD,EAAYjB,EAASkB,QAE3BD,EAAUwD,GAAGtC,MAAQC,EAAqBoC,EAAEE,cAAcd,OAC1D3D,EAAYgB,IAkBR0D,EAAc,SAACF,EAAGG,GACtB,IAAM3D,EAAYjB,EAASkB,QAC3BD,EAAU4D,OAAOJ,EAAIG,EAAK,EAAG3D,EAAU4D,OAAOJ,EAAG,GAAG,IACpDxE,EAAYgB,IAcd,OACE,qBAAK6D,UAAU,eAAf,SACE,qBAAKA,UAAU,eAAf,SACE,sBAAKA,UAAU,eAAf,UACG9E,EAASyB,OAAS,GACjB,qBAAKqD,UAAU,aAAf,SACE,gCACE,sBAAKA,UAAU,cAAf,4BAEE,qBAAKA,UAAU,mBAAf,4DAEF,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,UAAUC,SAAU,EAAnC,SACE,cAAC,IAAD,CACEvB,MAAOpD,EACP4E,SAAU,SAACxB,GAAD,OAAWnD,EAAgBmD,IACrCyB,iBA3BM,SAACzB,GACzB,IAAMvC,EAAYjB,EAASkB,QAE3B,EAAoBsC,EAAM0B,IAAlB7F,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,EACR4F,EAAI,eAAW9F,EAAX,aAAqB,IAAJC,EAAjB,cAAkC,IAAJC,EAA9B,YAEV0B,EAAUf,GAAgBmC,gBAAkB8C,EAE5ClF,EAAYgB,QAsBGjB,EAASqE,KAAK,SAAC7C,EAAGiD,GAAJ,OACb,uBAA+BK,UAAU,eAAzC,UACE,uBACEM,aAAc5D,EAAEW,MAChBkD,QAAS,WACPlF,EAAkBsE,GAClBpE,EAAgBb,EAAeQ,EAASyE,GAAGpC,gBAAiB,KAE9DiD,OAAQ,SAACd,GAAD,OAAOD,EAAkBC,EAAGC,IACpCc,UAAW,SAACf,GACI,UAAVA,EAAEgB,MACJjB,EAAkBC,EAAGC,GACrBD,EAAEE,cAAce,SAGpBC,cAAe,kBA5DP,SAACjB,GAC7B,IAAMxD,EAAYjB,EAASkB,QACrByE,EAAcvG,IACpB6B,EAAUwD,GAAGpC,gBAAkBsD,EAE/B1F,EAAYgB,GACZZ,EAAgBb,EAAemG,EAAa,IAsDHC,CAAsBnB,IAC3CoB,MAAO,CACLC,WAAW,6BAAD,OAA+BtG,EAAegC,EAAEa,gBAAgB,GAAhE,gBAA0E7C,EAAegC,EAAEa,gBAAgB,GAA3G,yBAGd,wBACE0D,MAAM,iBACNjB,UAAU,MACVkB,QAAS,kBA1ET,SAACvB,GACrB,IAAMxD,EAAYjB,EAASkB,QAC3BD,EAAU4D,OAAOJ,EAAG,GACpBxE,EAAYgB,GAuEuBgF,CAAcxB,IAH/B,SAKE,cAAC,IAAD,CAAiByB,KAAMC,QAEzB,sBAAKrB,UAAU,mBAAf,UACU,IAANL,GACA,sBACEsB,MAAM,YACNjB,UAAU,YACVkB,QAAS,kBAAMrB,EAAYF,GAAI,IAHjC,SAKE,cAAC,IAAD,CAAiB2B,KAAK,KAAKF,KAAMG,QAGnC5B,IAAMzE,EAASyB,OAAS,GACxB,sBACEsE,MAAM,aACNjB,UAAU,YACVkB,QAAS,kBAAMrB,EAAYF,EAAG,IAHhC,SAKE,cAAC,IAAD,CAAiB2B,KAAK,KAAKF,KAAMI,aA1CzC,gBAAoB9E,EAAEW,mBAoDhC,sBAAK2C,UAAU,iBAAf,UACG9E,EAASyB,OAAS,GACjB,sBAAKqD,UAAU,gBAAf,UACE,uBACEA,UAAU,mBACVyB,YAAY,4CACZjB,OAAQ,SAACd,GAAD,OAAO7D,EAAa6D,EAAEE,cAAcd,QAC5C2B,UAAW,SAACf,GACI,UAAVA,EAAEgB,MACJ7E,EAAa6D,EAAEE,cAAcd,OAC7BY,EAAEE,cAAce,WAItB,qBAAKX,UAAU,eAAekB,QAAS,kBAAMjF,EAAaO,QAAQR,KAAlE,SAGIA,EAAW,qCACT,cAAC,IAAD,CAAiBoF,KAAMM,MACpB,sBAEH,qCACA,cAAC,IAAD,CAAiBN,KAAMO,MACpB,0BAMb,sBAAK3B,UAAU,gBAAf,UACE,0BACEyB,YAAY,2DACZvB,SAvMS,SAACR,GAClBA,GAAKA,EAAEkC,gBAAgBlC,EAAEkC,iBAC7B,IACE,IAAMC,EAASnC,EAAEE,eAAiBF,EAC5BoC,EAAOD,EAAO/C,MAEdrC,EADMS,KAAKC,MAAM2E,GACNvC,KAAK,SAAAhD,GAAC,MAAK,CAAEG,EAAGH,EAAE,GAAGlC,QAAQ,GAAI4D,EAAG1B,EAAE,GAAGlC,QAAQ,OAE5DwG,EAAcvG,IAEdyH,EAAa,CACjB1E,MAAM,UAAD,OAAYnC,EAASyB,OAAO,GACjCF,OACAuF,QAAS,QACTC,MAAM,EACN1E,gBAAiB7C,EAAemG,EAAa,KAC7CrD,YAAa,YACb0E,YAAa,EACbC,iBAAkB,EAClBC,YAAa,EACbC,QAAQ,GAGV9G,EAAgBb,EAAemG,EAAa,IAC5C1F,EAAY,GAAD,mBAAMD,GAAN,CAAgB6G,KAC3BF,EAAO/C,MAAQ,GACf,MAAOwD,GACPC,QAAQC,IAAIF,OA8KHpH,EAASyB,OAAS,GACjB,sBAAKqD,UAAU,WAAf,UACE,uBAAOE,SAAU,SAACR,GAAD,OAAO/D,EAAW+D,EAAEE,cAAcd,QAAQ2C,YAAY,sBACvE,uBAAOvB,SAAU,SAACR,GAAD,OAAOjE,EAAWiE,EAAEE,cAAcd,QAAQ2C,YAAY,6BAK5EvG,EAASyB,OAAS,GACjB,qBAAKqD,UAAU,eAAf,SACG9E,EAASqE,KAAK,SAAChD,EAAEoD,GAAH,OACb,sBACEuB,QAAU,kBAnKI,SAACvB,GAC/B,IAAMxD,EAAYjB,EAASkB,QAC3BD,EAAUwD,GAAG0C,QAAUlG,EAAUwD,GAAG0C,OACpClH,EAAYgB,GAgKoBsG,CAAwB9C,IACxCoB,MAAO,CACL,kBAAmBxE,EAAE8F,OAAS,eAAiB,OAC/CK,QAASnG,EAAE8F,OAAS,GAAM,EAC1BM,OAAQ,UACR3B,WAAW,6BAAD,OAA+BtG,EAAe6B,EAAEgB,gBAAgB,GAAhE,eAAyE7C,EAAe6B,EAAEgB,gBAAgB,GAA1G,iCANd,SASGhB,EAAEc,aAKVnC,EAASyB,OAAS,GACjB,sBAAKqD,UAAU,WAAf,UACE,cAAC,IAAD,CACEvD,KAAM,CACJvB,SAAUY,GAEZoC,QAASA,IAEX,qBAAK8B,UAAU,gBAAf,SAAgCpE,kB,OCxWjCgH,MARf,WACE,OACE,qBAAK5C,UAAU,MAAf,SACE,cAAC,EAAD,OCAN6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.eef4e574.chunk.js","sourcesContent":["\nexport function rand(min, max, tail = 0) {\n  return (min + Math.random() * (max - min)).toFixed(tail);\n}\n\nexport function get_random_color() {\n  var h = rand(1, 360);\n  var s = rand(35, 100);\n  var l = rand(50, 85);\n  return `hsla(${h}, ${s}%, ${l}%, 0.35)`\n}\n\nexport function increase_alpha(c, a) {\n  if (!c) return '';\n  const _split = c.split(', ')\n  _split[3] = `${a})`\n  return _split.join(', ')\n}\n\n// export function add_alpha(c, a) {\n//   return c\n//     .replace('hsl(', 'hsla(')\n//     .replace(')',`, ${a})`)\n// }\n","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2';\nimport { increase_alpha, get_random_color } from '../utils/utils'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft, faChevronRight, faTimes, faArrowUp, faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { SketchPicker } from 'react-color';\n\nconst MainPage = () => {\n  const [datasets, setDatasets] = useState([])\n  const [currentDataset, setCurrentDataset] = useState(0)\n  const [currentColor, setCurrentColor] = useState()\n  const [suffixX, setSuffixX] = useState('')\n  const [suffixY, setSuffixY] = useState('')\n  const [chartName, setChartName] = useState('')\n  const [displayDatasets, setDisplayDatasets] = useState([])\n  const [lineMode, setLineMode] = useState(1)\n\n  useEffect(() => {\n    const _datasets = datasets.slice()\n\n    // edit datasets in a way that doesnt take all the space in the world ?\n    // const encoded = encodeURIComponent(JSON.stringify(_datasets))\n    // window.history.pushState(\"\", \"Charts for Genshin Optimizer\", `/share/${encoded}`);\n\n    let edgePoint = null;\n\n    _datasets.forEach( d => {\n      if (lineMode === 1) {\n        if (edgePoint === null || Number(d.data[0]?.x) < edgePoint) {\n          edgePoint = Number(d.data[0]?.x)\n        }\n      } else {\n        if (!edgePoint === null || Number(d.data[d.data.length-1]?.x) > edgePoint) {\n          edgePoint = Number(d.data[d.data.length-1]?.x)\n        }\n      }\n    })\n\n    const _displayDatasets = []\n    _datasets.forEach( d => {\n      _displayDatasets.push(d) // push original\n      \n      const line = generateLineChart(d, edgePoint)\n      _displayDatasets.push(line) // push generated line chart\n    })\n    \n    setDisplayDatasets(_displayDatasets)\n  }, [datasets, lineMode])\n\n  const generateLineChart = (input, edgePoint) => {\n\n    const output = JSON.parse(JSON.stringify(input))\n\n    output.label = getUniqueDatasetName(`Max(${input.label})`)\n    output.backgroundColor = increase_alpha(output.backgroundColor, 1)\n    output.borderColor = increase_alpha(output.backgroundColor, 0.5)\n\n    const sortFunc = lineMode === 1\n      ? (a, b) => Number(a.x) - Number(b.x)\n      : (a, b) => Number(b.x) - Number(a.x)\n\n    const increasingX = output.data.sort(sortFunc)\n    const minimumData = []\n\n    for (const point of increasingX) {\n      let last\n      while ((last = minimumData.pop())) {\n        if (Number(last.y) > Number(point.y)) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // if (minimumData[0].x !== increasingX[0].x)\n    //   increasingX[0].min = minimumData[0].y\n    \n    minimumData.forEach(x => { x.min = x.y })\n\n    // output.data = minimumData\n    output.data = [\n      { x: edgePoint, y: minimumData[0]?.y },\n      ...minimumData\n    ]\n\n    // return { displayData: increasingX, downloadData }\n\n    return output\n  }\n\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n        // labels: {\n        //   color: \"#ebecee\", \n        // }\n      }\n    },\n    scales: {\n      x: {\n        type: 'linear',\n        grid: {\n          color: '#acaeb399',\n          borderDash: [2, 2],\n        },\n        ticks: {\n          color: '#ebecee',\n          callback: function(value, index, values) {\n            return value + suffixX;\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: '#acaeb399',\n          borderDash: [2, 2],\n        },\n        ticks: {\n          color: '#ebecee',\n          callback: function(value, index, values) {\n            return `${value} ${suffixY}`\n          } \n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n    },\n    animation: {\n      duration: 0\n    }\n  }\n  \n  const pasteToDataset = (e) => {\n    if (e && e.preventDefault) e.preventDefault();\n    try {\n      const target = e.currentTarget || e\n      const text = target.value\n      const arr = JSON.parse(text)    \n      const data = arr.map( d => ({ x: d[0].toFixed(2), y: d[1].toFixed(2), }))\n\n      const randomColor = get_random_color();\n\n      const newDataset = {\n        label: `Paste #${datasets.length+1}`,\n        data,\n        stepped: 'after',\n        fill: false,\n        backgroundColor: increase_alpha(randomColor, 0.35),\n        borderColor: '#00000000',\n        borderWidth: 3,\n        pointHoverRadius: 4,\n        pointRadius: 2,\n        hidden: false,\n      }\n\n      setCurrentColor(increase_alpha(randomColor, 1))\n      setDatasets([ ...datasets, newDataset ])\n      target.value = ''\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // const getUniqueDatasetName = (newName) => {\n  //   const ZWSP = '​'\n  //   const trimmedName = newName.replaceAll(ZWSP, '') // (/​/g,'')\n  //   const numberOfDupes = datasets.filter( x => x.label.replaceAll(ZWSP, '') == trimmedName ).length\n  //   const ZWSPs = ZWSP.repeat(numberOfDupes)\n\n  //   return `${ZWSPs}${trimmedName}`\n  // }\n\n  const getUniqueDatasetName = (newName) => {\n    const allNames = datasets.map( x => x.label )\n    const ZWSP = '​'\n  \n    while (allNames.includes(newName)) {\n      newName = `${ZWSP}${newName}`\n    }\n    return newName\n  }\n\n  const toggleDatasetVisibility = (i) => {\n    const _datasets = datasets.slice()\n    _datasets[i].hidden = !_datasets[i].hidden\n    setDatasets(_datasets)\n  }\n\n  const changeDatasetName = (e, i) => {\n    const _datasets = datasets.slice()\n\n    _datasets[i].label = getUniqueDatasetName(e.currentTarget.value)\n    setDatasets(_datasets)\n  }\n\n  const deleteDataset = (i) => {\n    const _datasets = datasets.slice()\n    _datasets.splice(i, 1)\n    setDatasets(_datasets)\n  }\n\n  const randomizeDatasetColor = (i) => {\n    const _datasets = datasets.slice()\n    const randomColor = get_random_color();\n    _datasets[i].backgroundColor = randomColor\n    // _datasets[i].borderColor = increase_alpha(randomColor, 0.5)\n    setDatasets(_datasets)\n    setCurrentColor(increase_alpha(randomColor, 1))\n  }\n\n  const moveDataset = (i, dir) => {\n    const _datasets = datasets.slice()\n    _datasets.splice(i + dir, 0, _datasets.splice(i, 1)[0])\n    setDatasets(_datasets)\n  }\n\n  const handleChangeColor = (color) => {\n    const _datasets = datasets.slice()\n\n    const { h, s, l } = color.hsl\n    const _hsl = `hsla(${h}, ${s * 100}%, ${l * 100}%, 0.35)`\n\n    _datasets[currentDataset].backgroundColor = _hsl\n    // _datasets[currentDataset].borderColor = add_alpha(_hsl, 0.5)\n    setDatasets(_datasets)\n  };\n\n  return (\n    <div className=\"page-wrapper\">\n      <div className=\"card-wrapper\">\n        <div className=\"card-content\">\n          {datasets.length > 0 && (\n            <div className=\"paste-list\">\n              <div>\n                <div className=\"smol-header\">\n                  Manage datasets\n                  <div className=\"half-transparent\">(double click input to randomize new color)</div>\n                </div>\n                <div className=\"paste-container\">\n                  <div className=\"toolbox\" tabIndex={0}>\n                    <SketchPicker\n                      color={currentColor} // increase_alpha(datasets[currentDataset]?.backgroundColor, 1) || undefined}\n                      onChange={(color) => setCurrentColor(color)}\n                      onChangeComplete={handleChangeColor}\n                    />\n                  </div>\n                  {datasets.map( (x, i) => (\n                    <span key={`label-${x.label}`} className=\"single-paste\">\n                      <input\n                        defaultValue={x.label}\n                        onFocus={() => {\n                          setCurrentDataset(i)\n                          setCurrentColor(increase_alpha(datasets[i].backgroundColor, 1) )\n                        }}\n                        onBlur={(e) => changeDatasetName(e, i)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            changeDatasetName(e, i);\n                            e.currentTarget.blur();\n                          }\n                        }}\n                        onDoubleClick={() => randomizeDatasetColor(i)}\n                        style={{\n                          background: `linear-gradient(to right, ${increase_alpha(x.backgroundColor,1)} 0%, ${increase_alpha(x.backgroundColor,1)} 20%, #1b263b 20%)`\n                        }}\n                      />\n                      <button\n                        title=\"Remove dataset\"\n                        className=\"btn\"\n                        onClick={() => deleteDataset(i)}\n                      >\n                        <FontAwesomeIcon icon={faTimes} />\n                      </button>\n                      <div className=\"position-changer\">\n                        { i !== 0 && (\n                          <span\n                            title=\"Move left\"\n                            className=\"arrow-btn\"\n                            onClick={() => moveDataset(i, -1)}\n                          >\n                            <FontAwesomeIcon size=\"xs\" icon={faChevronLeft} />\n                          </span>\n                        )}\n                        { i !== datasets.length - 1 && (\n                          <span\n                            title=\"Move right\"\n                            className=\"arrow-btn\"\n                            onClick={() => moveDataset(i, 1)}\n                          >\n                            <FontAwesomeIcon size=\"xs\" icon={faChevronRight} />\n                          </span>\n                        )}\n                      </div>\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"inputs-wrapper\">\n            {datasets.length > 0 && (\n              <div className=\"paste-wrapper\">\n                <input\n                  className=\"chart-name-input\"\n                  placeholder=\"Chart name (e.g. Beidou Burst DMG vs ER%)\"\n                  onBlur={(e) => setChartName(e.currentTarget.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      setChartName(e.currentTarget.value);\n                      e.currentTarget.blur();\n                    }\n                  }}\n                />\n                <div className=\"set-line-btn\" onClick={() => setLineMode( Number(!lineMode) )}>\n                  \n                \n                  { lineMode ? <>\n                      <FontAwesomeIcon icon={faArrowRight} />\n                        {' Descending Line'}\n                      </> \n                    : <>\n                      <FontAwesomeIcon icon={faArrowUp} />\n                        {' Ascending Line'}\n                      </> \n                    }\n                </div>\n              </div>\n            )}\n            <div className=\"paste-wrapper\">\n              <textarea\n                placeholder=\"Paste Genshin Optimizer Chart's Min or Full Data here...\"\n                onChange={pasteToDataset}\n              />\n              {datasets.length > 0 && (\n                <div className=\"flex-col\">\n                  <input onChange={(e) => setSuffixY(e.currentTarget.value)} placeholder=\"Y-axis (e.g. dmg)\" />\n                  <input onChange={(e) => setSuffixX(e.currentTarget.value)} placeholder=\"X-axis (e.g. % ER)\" />\n                </div>\n              )}\n              {/* <button onClick={() => setDatasets([])} className=\"btn\">Clear</button> */}\n            </div>\n            {datasets.length > 0 && (\n              <div className=\"chart-legend\">\n                {datasets.map( (d,i) => (\n                  <span \n                    onClick={ () => toggleDatasetVisibility(i) }\n                    style={{\n                      'text-decoration': d.hidden ? 'line-through' : 'none',\n                      opacity: d.hidden ? 0.4 : 1,\n                      cursor: 'pointer',\n                      background: `linear-gradient(to right, ${increase_alpha(d.backgroundColor,1)} 0, ${increase_alpha(d.backgroundColor,1)} 2.5rem, transparent 2.5rem)`\n                    }}\n                  >\n                    {d.label}\n                  </span>\n                ))}\n              </div>\n            )}\n            {datasets.length > 0 && (\n              <div className=\"relative\">\n                <Line\n                  data={{\n                    datasets: displayDatasets,\n                  }}\n                  options={options}\n                />\n                <div className=\"chart-overlay\">{chartName}</div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MainPage\n","import MainPage from './pages/main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}