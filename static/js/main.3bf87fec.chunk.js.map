{"version":3,"sources":["utils/utils.js","pages/main.jsx","App.js","index.js"],"names":["rand","min","max","tail","Math","random","toFixed","get_random_color","h","s","l","increase_alpha","c","a","_split","split","join","MainPage","useState","datasets","setDatasets","currentDataset","setCurrentDataset","currentColor","setCurrentColor","suffixX","setSuffixX","suffixY","setSuffixY","chartName","setChartName","displayDatasets","setDisplayDatasets","lineMode","setLineMode","loading","setLoading","awaiting","setAwaiting","shareMessage","setShareMessage","shareId","setShareId","useEffect","pathname","window","location","startsWith","loadShare","replace","_datasets","slice","edgePoint","forEach","d","Number","data","x","length","_displayDatasets","push","line","generateLineChart","_shareId","url","axios","get","response","setTimeout","shareChart","dataToSave","post","history","pushState","id","resetShareMessage","console","log","input","output","JSON","parse","stringify","label","getUniqueDatasetName","backgroundColor","borderColor","sortFunc","b","increasingX","sort","minimumData","point","last","pop","y","options","responsive","plugins","legend","display","scales","type","grid","color","borderDash","ticks","callback","value","index","values","interaction","intersect","animation","duration","newName","allNames","map","includes","changeDatasetName","e","i","currentTarget","moveDataset","dir","splice","className","onClick","setSelectionRange","href","SpinnerCircularFixed","size","icon","faShareSquare","tabIndex","onChange","onChangeComplete","hsl","_hsl","defaultValue","onFocus","onBlur","onKeyDown","key","blur","onDoubleClick","randomColor","randomizeDatasetColor","style","background","title","deleteDataset","faTimes","faChevronLeft","faChevronRight","placeholder","faArrowRight","faArrowUp","preventDefault","target","text","newDataset","stepped","fill","borderWidth","pointHoverRadius","pointRadius","hidden","err","toggleDatasetVisibility","textDecoration","opacity","cursor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bf87fec.chunk.js","sourcesContent":["\nexport function rand(min, max, tail = 0) {\n  return (min + Math.random() * (max - min)).toFixed(tail);\n}\n\nexport function get_random_color() {\n  var h = rand(1, 360);\n  var s = rand(35, 100);\n  var l = rand(50, 85);\n  return `hsla(${h}, ${s}%, ${l}%, 0.35)`\n}\n\nexport function increase_alpha(c, a) {\n  if (!c) return '';\n  const _split = c.split(', ')\n  _split[3] = `${a})`\n  return _split.join(', ')\n}\n\n// export function add_alpha(c, a) {\n//   return c\n//     .replace('hsl(', 'hsla(')\n//     .replace(')',`, ${a})`)\n// }\n","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2';\nimport { increase_alpha, get_random_color } from '../utils/utils'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft, faChevronRight, faTimes, faArrowUp, faArrowRight, faShareSquare } from '@fortawesome/free-solid-svg-icons'\nimport { SketchPicker } from 'react-color';\nimport { SpinnerCircularFixed } from 'spinners-react';\nimport axios from 'axios';\n\nconst MainPage = () => {\n  const [datasets, setDatasets] = useState([])\n  const [currentDataset, setCurrentDataset] = useState(0)\n  const [currentColor, setCurrentColor] = useState()\n  const [suffixX, setSuffixX] = useState('')\n  const [suffixY, setSuffixY] = useState('')\n  const [chartName, setChartName] = useState('')\n  const [displayDatasets, setDisplayDatasets] = useState([])\n  const [lineMode, setLineMode] = useState(1)\n  const [loading, setLoading] = useState(false)\n  const [awaiting, setAwaiting] = useState(false)\n  const [shareMessage, setShareMessage] = useState('')\n  const [shareId, setShareId] = useState(null)\n\n  useEffect(() => {\n    const { pathname } = window.location;\n    if (pathname.startsWith('/share/')) loadShare(pathname.replace('/share/',''))\n  }, [])\n\n  useEffect(() => {\n    const _datasets = datasets.slice()\n\n    let edgePoint = null;\n\n    _datasets.forEach( d => {\n      if (lineMode === 1) {\n        if (edgePoint === null || Number(d.data[0]?.x) < edgePoint) {\n          edgePoint = Number(d.data[0]?.x)\n        }\n      } else {\n        if (!edgePoint === null || Number(d.data[d.data.length-1]?.x) > edgePoint) {\n          edgePoint = Number(d.data[d.data.length-1]?.x)\n        }\n      }\n    })\n\n    const _displayDatasets = []\n    _datasets.forEach( d => {\n      _displayDatasets.push(d) // push original\n      \n      const line = generateLineChart(d, edgePoint)\n      _displayDatasets.push(line) // push generated line chart\n    })\n    \n    setDisplayDatasets(_displayDatasets)\n  }, [datasets, lineMode])\n\n  useEffect(() => {\n    setShareId(null);\n  }, [datasets, lineMode, suffixX, suffixY, chartName])\n\n  const loadShare = async (_shareId) => {\n    if (!_shareId) return;\n    setLoading(true);\n    const url = `https://mimee.ovh/api/share/${_shareId}`\n    \n    try {\n      const response = await axios.get(url);\n      setTimeout(() => {\n        setLineMode(response.data.lineMode)\n        setDatasets(response.data.datasets)\n        setSuffixX(response.data.suffixX)\n        setSuffixY(response.data.suffixY)\n        setChartName(response.data.chartName)\n        setTimeout(() => setShareId(_shareId), 0)\n        setLoading(false);\n      }, 500)\n    } catch (e) {\n      setLoading(false);\n    }\n  }\n\n  const shareChart = async () => {\n    setAwaiting(true);\n    \n    const url = 'https://mimee.ovh/api/share/'\n    \n    try {\n      const dataToSave = {\n        lineMode,\n        datasets,\n        suffixX,\n        suffixY,\n        chartName,\n      }\n      const response = await axios.post(url, dataToSave);\n      window.history.pushState(\"\", \"Charts for Genshin Optimizer\", `/share/${response.data.id}`);\n      setShareId(response.data.id)\n\n      setTimeout(() => {\n        setAwaiting(false);\n        setShareMessage('Success!')\n        resetShareMessage()\n      }, 500)\n\n    } catch (err) {\n      console.log(err)\n\n      setTimeout(() => {\n        setAwaiting(false);\n        setShareMessage('Error!')\n        resetShareMessage()\n      }, 500)\n    }\n\n  }\n\n  const resetShareMessage = () => setTimeout(() => setShareMessage(''), 4000);\n\n  const generateLineChart = (input, edgePoint) => {\n\n    const output = JSON.parse(JSON.stringify(input))\n\n    output.label = getUniqueDatasetName(`Max(${input.label})`)\n    output.backgroundColor = increase_alpha(output.backgroundColor, 1)\n    output.borderColor = increase_alpha(output.backgroundColor, 0.5)\n\n    const sortFunc = lineMode === 1\n      ? (a, b) => Number(a.x) - Number(b.x)\n      : (a, b) => Number(b.x) - Number(a.x)\n\n    const increasingX = output.data.sort(sortFunc)\n    const minimumData = []\n\n    for (const point of increasingX) {\n      let last\n      while ((last = minimumData.pop())) {\n        if (Number(last.y) > Number(point.y)) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // if (minimumData[0].x !== increasingX[0].x)\n    //   increasingX[0].min = minimumData[0].y\n    \n    minimumData.forEach(x => { x.min = x.y })\n\n    // output.data = minimumData\n    output.data = [\n      { x: edgePoint, y: minimumData[0]?.y },\n      ...minimumData\n    ]\n\n    // return { displayData: increasingX, downloadData }\n\n    return output\n  }\n\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n        // labels: {\n        //   color: \"#ebecee\", \n        // }\n      }\n    },\n    scales: {\n      x: {\n        type: 'linear',\n        grid: {\n          color: '#acaeb399',\n          borderDash: [2, 2],\n        },\n        ticks: {\n          color: '#ebecee',\n          callback: function(value, index, values) {\n            return value + suffixX;\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: '#acaeb399',\n          borderDash: [2, 2],\n        },\n        ticks: {\n          color: '#ebecee',\n          callback: function(value, index, values) {\n            return `${value} ${suffixY}`\n          } \n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n    },\n    animation: {\n      duration: 0\n    }\n  }\n  \n  const pasteToDataset = (e) => {\n    if (e && e.preventDefault) e.preventDefault();\n    try {\n      const target = e.currentTarget || e\n      const text = target.value\n      const arr = JSON.parse(text)    \n      const data = arr.map( d => ({ x: d[0].toFixed(2), y: d[1].toFixed(2), }))\n\n      const randomColor = get_random_color();\n\n      const newDataset = {\n        label: `Paste #${datasets.length+1}`,\n        data,\n        stepped: 'after',\n        fill: false,\n        backgroundColor: increase_alpha(randomColor, 0.35),\n        borderColor: '#00000000',\n        borderWidth: 3,\n        pointHoverRadius: 4,\n        pointRadius: 2,\n        hidden: false,\n      }\n\n      setCurrentColor(increase_alpha(randomColor, 1))\n      setDatasets([ ...datasets, newDataset ])\n      target.value = ''\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // const getUniqueDatasetName = (newName) => {\n  //   const ZWSP = '​'\n  //   const trimmedName = newName.replaceAll(ZWSP, '') // (/​/g,'')\n  //   const numberOfDupes = datasets.filter( x => x.label.replaceAll(ZWSP, '') == trimmedName ).length\n  //   const ZWSPs = ZWSP.repeat(numberOfDupes)\n\n  //   return `${ZWSPs}${trimmedName}`\n  // }\n\n  const getUniqueDatasetName = (newName) => {\n    const allNames = datasets.map( x => x.label )\n    const ZWSP = '​'\n  \n    while (allNames.includes(newName)) {\n      newName = `${ZWSP}${newName}`\n    }\n    return newName\n  }\n\n  const toggleDatasetVisibility = (i) => {\n    const _datasets = datasets.slice()\n    _datasets[i].hidden = !_datasets[i].hidden\n    setDatasets(_datasets)\n  }\n\n  const changeDatasetName = (e, i) => {\n    const _datasets = datasets.slice()\n\n    _datasets[i].label = getUniqueDatasetName(e.currentTarget.value)\n    setDatasets(_datasets)\n  }\n\n  const deleteDataset = (i) => {\n    const _datasets = datasets.slice()\n    _datasets.splice(i, 1)\n    setDatasets(_datasets)\n  }\n\n  const randomizeDatasetColor = (i) => {\n    const _datasets = datasets.slice()\n    const randomColor = get_random_color();\n    _datasets[i].backgroundColor = randomColor\n    // _datasets[i].borderColor = increase_alpha(randomColor, 0.5)\n    setDatasets(_datasets)\n    setCurrentColor(increase_alpha(randomColor, 1))\n  }\n\n  const moveDataset = (i, dir) => {\n    const _datasets = datasets.slice()\n    _datasets.splice(i + dir, 0, _datasets.splice(i, 1)[0])\n    setDatasets(_datasets)\n  }\n\n  const handleChangeColor = (color) => {\n    const _datasets = datasets.slice()\n\n    const { h, s, l } = color.hsl\n    const _hsl = `hsla(${h}, ${s * 100}%, ${l * 100}%, 0.35)`\n\n    _datasets[currentDataset].backgroundColor = _hsl\n    // _datasets[currentDataset].borderColor = add_alpha(_hsl, 0.5)\n    setDatasets(_datasets)\n  };\n\n  return (\n    <div className=\"page-wrapper\">\n    { shareId && (\n      <div className='chart-link'>\n        Share link:\n        <input\n          onClick={e => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\n          value={window.location.href}\n        />\n      </div>\n    )}\n      <div className=\"card-wrapper\">\n        <div className=\"card-content\">\n          { loading ? (\n            <div className='loading-chart-wrapper'>\n              <SpinnerCircularFixed className='loading-chart' size={64} />\n            </div>\n          ) : (\n            <>\n              {datasets.length > 0 && (\n                <div className=\"paste-list\">\n                  <div>\n                    <div className='charts-manager'>\n                      { awaiting ? (\n                        <SpinnerCircularFixed className='share-btn' size={32} />\n                      ) : (\n                        <div onClick={() => shareChart()} className='share-btn pointer spacing'>\n                          { shareMessage || 'Save / Share' }\n                          <FontAwesomeIcon icon={faShareSquare} />\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"smol-header\">\n                      Manage datasets\n                      <div className=\"half-transparent\">(double click input to randomize new color)</div>\n                    </div>\n                    <div className=\"paste-container\">\n                      <div className=\"toolbox\" tabIndex={0}>\n                        <SketchPicker\n                          color={currentColor} // increase_alpha(datasets[currentDataset]?.backgroundColor, 1) || undefined}\n                          onChange={(color) => setCurrentColor(color)}\n                          onChangeComplete={handleChangeColor}\n                        />\n                      </div>\n                      {datasets.map( (x, i) => (\n                        <span key={`label-${x.label}`} className=\"single-paste\">\n                          <input\n                            defaultValue={x.label}\n                            onFocus={() => {\n                              setCurrentDataset(i)\n                              setCurrentColor(increase_alpha(datasets[i].backgroundColor, 1) )\n                            }}\n                            onBlur={(e) => changeDatasetName(e, i)}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter') {\n                                changeDatasetName(e, i);\n                                e.currentTarget.blur();\n                              }\n                            }}\n                            onDoubleClick={() => randomizeDatasetColor(i)}\n                            style={{\n                              background: `linear-gradient(to right, ${increase_alpha(x.backgroundColor,1)} 0%, ${increase_alpha(x.backgroundColor,1)} 20%, #1b263b 20%)`\n                            }}\n                          />\n                          <button\n                            title=\"Remove dataset\"\n                            className=\"btn\"\n                            onClick={() => deleteDataset(i)}\n                          >\n                            <FontAwesomeIcon icon={faTimes} />\n                          </button>\n                          <div className=\"position-changer\">\n                            { i !== 0 && (\n                              <span\n                                title=\"Move left\"\n                                className=\"arrow-btn\"\n                                onClick={() => moveDataset(i, -1)}\n                              >\n                                <FontAwesomeIcon size=\"xs\" icon={faChevronLeft} />\n                              </span>\n                            )}\n                            { i !== datasets.length - 1 && (\n                              <span\n                                title=\"Move right\"\n                                className=\"arrow-btn\"\n                                onClick={() => moveDataset(i, 1)}\n                              >\n                                <FontAwesomeIcon size=\"xs\" icon={faChevronRight} />\n                              </span>\n                            )}\n                          </div>\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div className=\"inputs-wrapper\">\n                {datasets.length > 0 && (\n                  <div className=\"paste-wrapper\">\n                    <input\n                      className=\"chart-name-input\"\n                      placeholder=\"Chart name (e.g. Beidou Burst DMG vs ER%)\"\n                      defaultValue={chartName || \"\"}\n                      onBlur={(e) => setChartName(e.currentTarget.value)}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          setChartName(e.currentTarget.value);\n                          e.currentTarget.blur();\n                        }\n                      }}\n                    />\n                    <div className=\"set-line-btn\" onClick={() => setLineMode( Number(!lineMode) )}>\n                      { lineMode ? <>\n                          <FontAwesomeIcon icon={faArrowRight} />\n                            {' Descending Line'}\n                          </> \n                        : <>\n                          <FontAwesomeIcon icon={faArrowUp} />\n                            {' Ascending Line'}\n                          </> \n                        }\n                    </div>\n                  </div>\n                )}\n                <div className=\"paste-wrapper\">\n                  <textarea\n                    placeholder=\"Paste Genshin Optimizer Chart's Min or Full Data here...\"\n                    onChange={pasteToDataset}\n                  />\n                  {datasets.length > 0 && (\n                    <div className=\"flex-col\">\n                      <input onChange={(e) => setSuffixY(e.currentTarget.value)} placeholder=\"Y-axis (e.g. dmg)\" defaultValue={suffixY || \"\"}/>\n                      <input onChange={(e) => setSuffixX(e.currentTarget.value)} placeholder=\"X-axis (e.g. % ER)\" defaultValue={suffixX || \"\"} />\n                    </div>\n                  )}\n                  {/* <button onClick={() => setDatasets([])} className=\"btn\">Clear</button> */}\n                </div>\n                {datasets.length > 0 && (\n                  <div className=\"chart-legend\">\n                    {datasets.map( (d,i) => (\n                      <span \n                        key={`chart-legend-${i}`}\n                        onClick={ () => toggleDatasetVisibility(i) }\n                        style={{\n                          textDecoration: d.hidden ? 'line-through' : 'none',\n                          opacity: d.hidden ? 0.4 : 1,\n                          cursor: 'pointer',\n                          background: `linear-gradient(to right, ${increase_alpha(d.backgroundColor,1)} 0, ${increase_alpha(d.backgroundColor,1)} 2.5rem, transparent 2.5rem)`\n                        }}\n                      >\n                        {d.label}\n                      </span>\n                    ))}\n                  </div>\n                )}\n                {datasets.length > 0 && (\n                  <div className=\"relative\">\n                    <Line\n                      data={{\n                        datasets: displayDatasets,\n                      }}\n                      options={options}\n                    />\n                    <div className=\"chart-overlay\">{chartName}</div>\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MainPage\n","import MainPage from './pages/main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}